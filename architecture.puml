@startuml Enhanced RAG System Architecture

!define RECTANGLE_COLOR #F8F8F8
!define SERVICE_COLOR #C5E1A5
!define DATABASE_COLOR #BBDEFB
!define CLIENT_COLOR #FFE082
!define EXTERNAL_COLOR #D1C4E9
!define CONTAINER_COLOR #DCEDC8
!define MONITORING_COLOR #FFCCBC

skinparam componentStyle rectangle
skinparam component {
  BackgroundColor RECTANGLE_COLOR
  BorderColor black
  ArrowColor black
}

skinparam database {
  BackgroundColor DATABASE_COLOR
  BorderColor black
}

skinparam rectangle {
  BackgroundColor RECTANGLE_COLOR
  BorderColor black
  RoundCorner 10
}

skinparam cloud {
  BackgroundColor EXTERNAL_COLOR
  BorderColor black
}

' Top-level components
package "Client Layer" as ClientLayer {
  [Web Browser] as WebClient #CLIENT_COLOR
  [Mobile App] as MobileClient #CLIENT_COLOR
  [API Client] as ApiClient #CLIENT_COLOR
}

package "Infrastructure" as Infra {
  [Load Balancer] as LoadBalancer #RECTANGLE_COLOR
  [API Gateway] as ApiGateway #RECTANGLE_COLOR
  
  rectangle "Kubernetes Cluster" as K8s #CONTAINER_COLOR {
    package "External Services" as ExternalSvcs {
      [OpenAI API] as OpenAI #EXTERNAL_COLOR
      [Document Storage] as DocStorage #EXTERNAL_COLOR
    }
    
    package "API Layer" as ApiLayer {
      [RagApiController] as RagController #SERVICE_COLOR
      [AdminController] as AdminController #SERVICE_COLOR
      [UiSupportController] as UIController #SERVICE_COLOR
      [SecurityFilters] as Security #SERVICE_COLOR
    }
    
    package "Core RAG Engine" as CoreEngine {
      [EnhancedRagService] as RagService #SERVICE_COLOR
      [RetrievalPipeline] as RetrievalPipeline #SERVICE_COLOR
      [RetrievalStrategyFactory] as StrategyFactory #SERVICE_COLOR
      
      rectangle "Retrieval Strategies" as Strategies {
        [HybridStrategy] as HybridStrategy #SERVICE_COLOR
        [HydeStrategy] as HydeStrategy #SERVICE_COLOR
        [DecompositionStrategy] as DecompositionStrategy #SERVICE_COLOR
        [AdvancedStrategy] as AdvancedStrategy #SERVICE_COLOR
      }
    }
    
    package "Document Processing" as DocProcessing {
      [DocumentProcessor] as DocProcessor #SERVICE_COLOR
      [MultiModalProcessor] as MultiModalProcessor #SERVICE_COLOR
      [EntityExtractor] as EntityExtractor #SERVICE_COLOR
    }
    
    package "Evaluation System" as EvalSystem {
      [EvaluationService] as EvalService #SERVICE_COLOR
      [EvaluationRepository] as EvalRepo #SERVICE_COLOR
    }
    
    package "Storage Layer" as StorageLayer {
      database "Vector DB (Weaviate)" as VectorDB #DATABASE_COLOR {
        [EnhancedWeaviateVectorStore] as WeaviateStore #SERVICE_COLOR
        [VectorStoreFactory] as VectorFactory #SERVICE_COLOR
      }
      
      database "Graph DB (Neo4j)" as GraphDB #DATABASE_COLOR {
        [EnhancedNeo4jGraphRepository] as Neo4jRepo #SERVICE_COLOR
      }
      
      database "Relational DB (PostgreSQL)" as RelationalDB #DATABASE_COLOR {
        [EvaluationStorage] as EvalStorage #DATABASE_COLOR
      }
      
      database "Cache (Redis)" as CacheDB #DATABASE_COLOR {
        [QueryCache] as QueryCache #DATABASE_COLOR
        [EntityCache] as EntityCache #DATABASE_COLOR
      }
    }
    
    package "Monitoring and Observability" as MonitoringLayer {
      [MetricsService] as MetricsService #MONITORING_COLOR
      [Prometheus] as Prometheus #MONITORING_COLOR
      [Grafana] as Grafana #MONITORING_COLOR
      [Loki] as Loki #MONITORING_COLOR
      [Tempo] as Tempo #MONITORING_COLOR
      [OpenTelemetry Collector] as OtelCollector #MONITORING_COLOR
    }
  }
}

' Relationships - Client Layer
WebClient --> LoadBalancer
MobileClient --> LoadBalancer
ApiClient --> LoadBalancer
LoadBalancer --> ApiGateway
ApiGateway --> RagController
ApiGateway --> AdminController
ApiGateway --> UIController

' Relationships - API Layer
RagController --> Security
AdminController --> Security
UIController --> Security
Security --> RagService
Security --> EvalService

' Relationships - Core Engine
RagController --> RagService
RagService --> RetrievalPipeline
RagService --> OpenAI
RagService --> DocProcessor
RagService --> MultiModalProcessor
RagService --> EvalService
RetrievalPipeline --> StrategyFactory
StrategyFactory -down-> HybridStrategy
StrategyFactory -down-> HydeStrategy
StrategyFactory -down-> DecompositionStrategy
StrategyFactory -down-> AdvancedStrategy
HybridStrategy -down-> VectorFactory
HybridStrategy -down-> Neo4jRepo
HydeStrategy -down-> VectorFactory
HydeStrategy -down-> OpenAI
DecompositionStrategy -down-> VectorFactory
DecompositionStrategy -down-> OpenAI
AdvancedStrategy -down-> VectorFactory
AdvancedStrategy -down-> Neo4jRepo
AdvancedStrategy -down-> OpenAI

' Relationships - Document Processing
DocProcessor --> EntityExtractor
MultiModalProcessor --> DocProcessor
MultiModalProcessor --> OpenAI
DocProcessor --> DocStorage
RagController -left-> DocProcessor : Document Ingestion

' Relationships - Storage Layer
VectorFactory -down-> WeaviateStore
RetrievalPipeline --> WeaviateStore
RetrievalPipeline --> Neo4jRepo
DocProcessor --> WeaviateStore
DocProcessor --> Neo4jRepo
EntityExtractor -right-> Neo4jRepo : Entity Storage
EvalRepo --> EvalStorage
EntityExtractor -down-> EntityCache : Cache Entities
RagService -down-> QueryCache : Cache Responses

' Relationships - Evaluation System
AdminController -right-> EvalService : Admin Operations
EvalService -down-> EvalRepo
RagService -right-> EvalService : Auto-evaluate

' Relationships - Monitoring
RagService -up-> MetricsService : Record Metrics
DocProcessor -up-> MetricsService : Record Metrics
RetrievalPipeline -up-> MetricsService : Record Metrics
EvalService -up-> MetricsService : Record Metrics
MetricsService -right-> Prometheus : Export Metrics
Prometheus -right-> Grafana : Visualization
OtelCollector -right-> Tempo : Tracing
OtelCollector -right-> Loki : Logging
OtelCollector -right-> Prometheus : Metrics

' Data Flow Labels
WebClient -down-> LoadBalancer : "User Queries"
RagController -down-> RagService : "Process Query"
RagService -down-> RetrievalPipeline : "Retrieve Context"
RagService -right-> OpenAI : "Generate Response"
RetrievalPipeline -down-> WeaviateStore : "Vector Similarity Search"
RetrievalPipeline -down-> Neo4jRepo : "Knowledge Graph Query"
DocProcessor -down-> WeaviateStore : "Store Embeddings"
DocProcessor -right-> Neo4jRepo : "Update Knowledge Graph"
EntityExtractor -right-> OpenAI : "Extract Entities"

legend right
  **Enhanced RAG System Architecture**
  
  Color Legend:
  <back:CLIENT_COLOR>Client Components</back>
  <back:SERVICE_COLOR>Service Components</back>
  <back:DATABASE_COLOR>Data Storage</back>
  <back:EXTERNAL_COLOR>External Services</back>
  <back:MONITORING_COLOR>Monitoring Components</back>
  <back:CONTAINER_COLOR>Infrastructure</back>
endlegend

@enduml
